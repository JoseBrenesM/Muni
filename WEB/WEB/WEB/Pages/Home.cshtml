@page
@model WEB.Pages.HomeModel
@{
    ViewData["Title"] = "Inicio";
}
@{
    var idUsuario = new Guid();
    @if (User.Identity.IsAuthenticated)
    {
        idUsuario = Abstracciones.Modelos.Autenticacion.ClaimsPrincipalExtensions.GetIdUsuario(User);
    }
}
</br>

<h1 class="mb-4" id="bienvenido">Bienvenido de vuelta</h1>

<div class="card p-4 mb-5 shadow" style="background-color: #f0f8ff; border-left: 5px solid #007bff;">
    <div class="d-flex flex-column flex-md-row justify-content-between align-items-start align-items-md-center">
        <div>
            <h3 class="mb-3" style="color: #007bff;">Estado actual</h3>
            <p class="fs-4">
                <strong id="estadoActual">
                    @(Model.HorarioActual?.IdEstado != null ? Model.ObtenerNombreEstado(Model.HorarioActual.IdEstado) : "Aún no has iniciado tu jornada.")
                </strong>
            </p>
        </div>

        <div class="d-flex flex-wrap gap-2 mt-3 mt-md-0">
            <button id="btnEntrada" class="btn btn-success">Iniciar Jornada</button>
            <button id="btnInicioAlmuerzo" class="btn btn-warning">Ir al Almuerzo</button>
            <button id="btnFinAlmuerzo" class="btn btn-primary">Regresar del Almuerzo</button>
            <button id="btnSalida" class="btn btn-danger">Finalizar Jornada</button>
        </div>

    </div>
</div>

<div class="card p-4 shadow mb-4">
    <h4 class="mb-3" style="color: #343a40;">Tus registros de hoy</h4>
    <table class="table table-striped table-bordered">
        <thead>
            <tr>
                <th>Hora de Entrada</th>
                <th>Inicio Almuerzo</th>
                <th>Fin Almuerzo</th>
                <th>Hora de Salida</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td id="horaEntrada">
                    @(Model.HorarioActual?.HoraEntrada != null ? Model.HorarioActual.HoraEntrada.Value.ToString("HH:mm") : "Aún no se ha realizado una marca")
                </td>
                <td id="horaInicioAlmuerzo">
                    @(Model.HorarioActual?.HoraInicioAlmuerzo != null ? Model.HorarioActual.HoraInicioAlmuerzo.Value.ToString("HH:mm") : "Aún no se ha realizado una marca")
                </td>
                <td id="horaFinAlmuerzo">
                    @(Model.HorarioActual?.HoraFinAlmuerzo != null ? Model.HorarioActual.HoraFinAlmuerzo.Value.ToString("HH:mm") : "Aún no se ha realizado una marca")
                </td>
                <td id="horaSalida">
                    @(Model.HorarioActual?.HoraSalida != null ? Model.HorarioActual.HoraSalida.Value.ToString("HH:mm") : "Aún no se ha realizado una marca")
                </td>
            </tr>
        </tbody>
    </table>
</div>

<div class="card p-3 shadow-sm">
    <h5 class="mb-3 text-muted">Estados posibles</h5>
    <table class="table table-bordered table-sm">
        <thead class="table-light">
            <tr>
                <th style="width: 120px;">ID Estado</th>
                <th>Descripción</th>
            </tr>
        </thead>
        <tbody>
            <tr><td>1</td><td>Jornada Iniciada</td></tr>
            <tr><td>2</td><td>En Almuerzo</td></tr>
            <tr><td>3</td><td>Regreso del Almuerzo</td></tr>
            <tr><td>4</td><td>Jornada Finalizada</td></tr>
        </tbody>
    </table>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', async function () {
            const idPersona = "@idUsuario"; 

            try {
                const response = await fetch(`https://localhost:7184/api/Persona/${idPersona}`);

                if (response.ok) {
                    const persona = await response.json();
                    const nombreCompleto = `${persona.nombre} ${persona.apellido}`;

                    const titulo = document.querySelector('#bienvenido');
                    if (titulo) {
                        titulo.innerHTML = `Bienvenido de vuelta, <span style="color: #158cba; font-weight: bold;">${nombreCompleto}</span>`;
                    }
                } else {
                    console.error('Error al obtener los datos de la persona');
                }
            } catch (error) {
                console.error('Hubo un error en la petición:', error);
            }
        });
    </script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        const idPersona = "@idUsuario";
        const baseUrl = "https://localhost:7184/api/Horario/";

        const buttons = {
            entrada: document.getElementById("btnEntrada"),
            inicioAlmuerzo: document.getElementById("btnInicioAlmuerzo"),
            finAlmuerzo: document.getElementById("btnFinAlmuerzo"),
            salida: document.getElementById("btnSalida")
        };

        const originalTexts = {
            entrada: "Marcar Entrada",
            inicioAlmuerzo: "Iniciar Almuerzo",
            finAlmuerzo: "Finalizar Almuerzo",
            salida: "Marcar Salida"
        };

        const updateUI = async () => {
            try {
                const res = await fetch(`${baseUrl}actual?idPersona=${idPersona}`);
                if (!res.ok) throw new Error("No se pudo obtener el estado");

                const horario = await res.json();
                const estado = horario.idEstado;

                Object.values(buttons).forEach(btn => btn.disabled = true);

                if (estado === null) {
                    buttons.entrada.disabled = false;
                } else {
                    switch (estado) {
                        case 1:
                            buttons.inicioAlmuerzo.disabled = false;
                            buttons.salida.disabled = false;
                            break;
                        case 2:
                            buttons.finAlmuerzo.disabled = false;
                            break;
                        case 3:
                            buttons.salida.disabled = false;
                            break;
                        case 4:
                            break;
                    }
                }

                document.querySelector("#horaEntrada").innerText = horario.horaEntrada ? formatHour(horario.horaEntrada) : "Aún no se ha realizado una marca";
                document.querySelector("#horaInicioAlmuerzo").innerText = horario.horaInicioAlmuerzo ? formatHour(horario.horaInicioAlmuerzo) : "Aún no se ha realizado una marca";
                document.querySelector("#horaFinAlmuerzo").innerText = horario.horaFinAlmuerzo ? formatHour(horario.horaFinAlmuerzo) : "Aún no se ha realizado una marca";
                document.querySelector("#horaSalida").innerText = horario.horaSalida ? formatHour(horario.horaSalida) : "Aún no se ha realizado una marca";
                document.querySelector("#estadoActual").innerText = obtenerNombreEstado(estado);
                verificarEspera(horario);

            } catch (err) {
                buttons.entrada.disabled = false;
                buttons.inicioAlmuerzo.disabled = true;
                buttons.finAlmuerzo.disabled = true;
                buttons.salida.disabled = true;

                document.querySelector("#estadoActual").innerText = "Aún no has iniciado tu jornada.";
                document.querySelector("#horaEntrada").innerText = "Aún no se ha realizado una marca";
                document.querySelector("#horaInicioAlmuerzo").innerText = "Aún no se ha realizado una marca";
                document.querySelector("#horaFinAlmuerzo").innerText = "Aún no se ha realizado una marca";
                document.querySelector("#horaSalida").innerText = "Aún no se ha realizado una marca";
            }
        };


        const marcar = async (tipo) => {
            const endpoints = {
                entrada: "marcar-entrada",
                inicioAlmuerzo: "marcar-inicio-almuerzo",
                finAlmuerzo: "marcar-fin-almuerzo",
                salida: "marcar-salida"
            };

            try {
                const res = await fetch(`${baseUrl}${endpoints[tipo]}?idPersona=${idPersona}`, {
                    method: "POST"
                });

                if (res.ok) {
                    await Swal.fire("¡Marcado!", "La marca fue registrada correctamente", "success");
                    await updateUI();
                    if (tipo !== "salida") {
                        const resHorario = await fetch(`${baseUrl}actual?idPersona=${idPersona}`);
                        if (resHorario.ok) {
                            const horario = await resHorario.json();
                            verificarEspera(horario);
                        }
                    }

                } else {
                    Swal.fire("Error", "No se pudo registrar la marca", "error");
                }
            } catch (err) {
                console.error(err);
                Swal.fire("Error", "Algo salió mal", "error");
            }
        };

        const formatHour = (dateStr) => {
            const date = new Date(dateStr);
            return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
        };

        const obtenerNombreEstado = (idEstado) => {
            switch (idEstado) {
                case 1: return "Jornada Iniciada";
                case 2: return "En Almuerzo";
                case 3: return "Regreso del Almuerzo";
                case 4: return "Jornada Finalizada";
                default: return "Sin estado";
            }
        };

        const getLastMarkTime = (horario) => {
            const marcas = [
                horario.horaEntrada,
                horario.horaInicioAlmuerzo,
                horario.horaFinAlmuerzo,
                horario.horaSalida
            ].filter(m => m != null).map(m => new Date(m));

            return marcas.length > 0 ? new Date(Math.max(...marcas.map(d => d.getTime()))) : null;
        };
        const verificarEspera = (horario) => {
            const lastMark = getLastMarkTime(horario);
            if (!lastMark) return;

            if (horario.horaSalida && new Date(horario.horaSalida).getTime() === lastMark.getTime()) {
                return;
            }

            const now = new Date();
            const diffMs = now - lastMark;
            const diffSec = Math.floor(diffMs / 1000);

            if (diffSec < 60) {
                const segundosRestantes = 60 - diffSec;

                for (const [key, btn] of Object.entries(buttons)) {
                    if (!btn.disabled) {
                        btn.disabled = true;
                        btn.innerText = "Espera...";
                    }
                }

                Swal.fire({
                    icon: 'info',
                    title: 'Espera requerida',
                    text: `Debes esperar ${segundosRestantes} segundos antes de realizar otra marca.`,
                    timer: 3000,
                    showConfirmButton: false
                });

                setTimeout(async () => {
                    await updateUI();
                    for (const [key, btn] of Object.entries(buttons)) {
                        btn.innerText = originalTexts[key];
                    }
                }, segundosRestantes * 1000);
            }
        };


        buttons.entrada.addEventListener("click", () => marcar("entrada"));
        buttons.inicioAlmuerzo.addEventListener("click", () => marcar("inicioAlmuerzo"));
        buttons.finAlmuerzo.addEventListener("click", () => marcar("finAlmuerzo"));
        buttons.salida.addEventListener("click", () => marcar("salida"));

        updateUI(); 
    </script>


}
