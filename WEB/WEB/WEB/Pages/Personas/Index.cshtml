@page
@model WEB.Pages.Personas.IndexModel
@{
}
</br>
<div>
    <a class="btn btn-success" asp-page="/Cuenta/Registrarse" role="button"> <i class="bi bi-person-add">  </i>Registrar Persona</a>
</div>
</br>
<h2 style="font-weight:bold;">Personal Registrado</h2>
<input type="text" id="busquedaInput" class="form-control mb-3" placeholder="Buscar por nombre, apellido, correo o departamento..." />


<div class="container">
    <div class="row justify-content-center" style="background-color: #f9f8fa;">
        <div class="container">
            @if (Model.personas != null && Model.personas.Any())
            {
                <table class="table table-striped"
                       data-paginacion="true"
                       data-pagination-id="pagination"
                       data-rows-per-page="5">
                    <thead>
                        <tr>
                            <th scope="col">Nombre Completo</th>
                            <th scope="col">Teléfono</th>
                            <th scope="col">Correo</th>
                            <th scope="col">Departamento</th>
                            <th scope="col">Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var persona in Model.personas)
                        {
                            <tr>
                                <td>@Html.DisplayFor(modelItem => persona.Nombre) @Html.DisplayFor(modelItem => persona.Apellido)</td>
                                <td>@Html.DisplayFor(modelItem => persona.Telefono)</td>
                                <td>@Html.DisplayFor(modelItem => persona.Correo)</td>
                                <td>@Html.DisplayFor(modelItem => persona.Direccion)</td>
                                <td>
                                    <a class="btn btn-secondary" asp-page="../Roles/Index" asp-route-id="@persona.Id"><i class="bi bi-info-circle"></i> Ir a Roles</a>
                                    <a class="btn btn-warning" asp-page="./EditarPerfil" asp-route-id="@persona.Id"><i class="bi bi-pencil"></i> Editar</a>
                                    <a class="btn btn-dark btnResetPass"
                                       data-id="@persona.Id"
                                       data-nombre="@persona.Nombre"
                                       data-apellido="@persona.Apellido">
                                        <i class="bi bi-lock"></i> Reestablecer Contraseña
                                    </a>
                                    @if (persona.Activo)
                                    {
                                        <a asp-page="./Eliminar" asp-route-id="@persona.Id" class="btn btn-danger">
                                            <i class="bi bi-person-x"></i> Deshabilitar
                                        </a>
                                    }
                                    else
                                    {
                                        <button class="btn btn-success" onclick="cambiarEstado('@persona.Id')">
                                            <i class="bi bi-person-check"></i> Habilitar
                                        </button>
                                    }
                                    

                                </td>
                            </tr>
                           
                        }
                    </tbody>
                </table>
                <nav>
                    <ul class="pagination justify-content-center" id="pagination"></ul>
                </nav>

            }

            else
            {
                <div class="alert alert-danger" role="alert">
                    No hay personas para mostrar. Añade una.
                </div>
            }
        </div>
    </div>
</div>
<div class="modal fade" id="resetPasswordModal" tabindex="-1" aria-labelledby="resetPasswordModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="resetPasswordModalLabel">Reestablecer Contraseña para <span id="nombrePersona"></span></h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
            </div>
            <div class="modal-body">
                <input type="password" id="nuevaPassword" class="form-control" placeholder="Ingrese nueva contraseña">
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-primary" id="confirmarReset">Confirmar</button>
            </div>
        </div>
    </div>
</div>

</br>
<script src="/js/buscar.js"></script>
<script src="/js/paginacion.js"></script>
<script>
    const resetModalEl = document.getElementById("resetPasswordModal");
    const nuevaPasswordInput = document.getElementById("nuevaPassword");

    resetModalEl.addEventListener("hidden.bs.modal", () => {
        nuevaPasswordInput.value = "";
    });

    document.querySelectorAll(".btnResetPass").forEach(btn => {
        btn.addEventListener("click", function () {
            const modal = new bootstrap.Modal(resetModalEl);
            modal.show();

            const idPersona = this.getAttribute("data-id");
            const nombre = this.getAttribute("data-nombre");
            const apellido = this.getAttribute("data-apellido");

            document.getElementById("confirmarReset").setAttribute("data-id", idPersona);
            document.getElementById("nombrePersona").innerText = `${nombre} ${apellido}`;
        });
    });

    document.getElementById("confirmarReset").addEventListener("click", async function () {
        const nuevaPassword = nuevaPasswordInput.value.trim();
        const idPersona = this.getAttribute("data-id");

        if (!nuevaPassword) {
            Swal.fire("Error", "La contraseña no puede estar vacía", "warning");
            return;
        }

        if (nuevaPassword.length < 12) {
            Swal.fire("Error", "La contraseña debe tener al menos 12 caracteres", "warning");
            return;
        }

        try {
            const response = await fetch(`https://localhost:7135/api/Usuario/ActualizarHash?idPersona=${idPersona}&Nuevohash=${encodeURIComponent(nuevaPassword)}`, {
                method: "PUT"
            });

            if (response.ok) {
                Swal.fire("Éxito", "Contraseña actualizada correctamente", "success");
                bootstrap.Modal.getInstance(resetModalEl).hide();
                nuevaPasswordInput.value = "";
            } else {
                const errorText = await response.text();
                Swal.fire("Error", `No se pudo actualizar la contraseña: ${errorText}`, "error");
            }
        } catch (error) {
            Swal.fire("Error", "Error en la petición: " + error.message, "error");
        }
    });
</script>

<script>
    async function cambiarEstado(id) {
        const { isConfirmed } = await Swal.fire({
            title: '¿Estás seguro?',
            text: "¿Deseas habilitar la cuenta de esta persona?",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Sí, habilitar',
            confirmButtonColor: '#158cba',
            cancelButtonText: 'Cancelar',
            reverseButtons: true
        });

        if (isConfirmed) {
            try {
                const respuesta = await fetch(`https://localhost:7184/api/Persona/Activar/${id}`, {
                    method: 'PUT'
                });

                if (respuesta.ok) {
                    Swal.fire(
                        '¡Cuenta Habilitada!',
                        'La cuenta se ha activado correctamente.',
                        'success'
                    );
                    location.reload();
                } else {
                    Swal.fire(
                        'Error',
                        'Hubo un problema al habilitar la cuenta ',
                        'error'
                    );
                }
            } catch (error) {
                console.error("Error en la petición:", error);
                Swal.fire(
                    'Error de conexión',
                    'No se pudo conectar con el servidor.',
                    'error'
                );
            }
        }
    }
</script>